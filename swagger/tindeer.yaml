openapi: 3.0.0
info:
  title: Tindeer API
  description: Notre super API pour notre application mobile de rencontre de Rennes
  version: 1.0.0
servers:
  - url: http://localhost:9080/api/v1
    description: Environnement de test Docker
  - url: http://localhost:9090/api/v1
    description: Environnement de test local
components:
  securitySchemes:
    oAuthSample:    # <---- arbitrary name
      type: oauth2
      description: This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)
      flows:
        authorizationCode:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: http://keycloak:8080/realms/tindeer/protocol/openid-connect/auth
          tokenUrl: http://keycloak:8080/realms/tindeer/protocol/openid-connect/token
          scopes:
            profile: access profile
            email: access email
  schemas:
    ProfileDto:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        mail:
          type: string
          format: email
        age:
          type: integer
          minimum: 13
        firstName:
          type: string
        lastName:
          type: string
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
      required:
        - userId
security:
  - oAuthSample:
    - profile
    - email
paths:
  /profiles/current:
    get:
      summary: Get current user data
      responses:
        '200':    # status code
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
  /profiles:
    get:
      summary: Search profiles by mail
      operationId: searchByMail
      parameters:
        - name: mail
          in: query
          description: Email address
          schema:
            type: string
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
            default: 20
            maximum: 200
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
    post:
      summary: Create a new profile
      operationId: createProfile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileDto'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
  /profiles/{id}:
    get:
      summary: Get a profile by ID
      operationId: getProfile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
    put:
      summary: Update a profile by ID
      operationId: updateProfile
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileDto'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileDto'
